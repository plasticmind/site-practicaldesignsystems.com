<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ site.title }}</title>
    <link rel="stylesheet" href="https://use.typekit.net/xhn3otp.css">
    <link rel="stylesheet" href="{{ site.url }}/assets/css/global.css">    
    <link rel="canonical" href="{{ site.url }}/{% if page.fileSlug %}{{ page.fileSlug }}{% endif %}">
  </head>
  <body class="{% if page.fileSlug %}single-page page-{{ page.fileSlug }}{% else %}home{% endif %}">
      <section class="c-site-header">
        <div class="l-container">
          <div class="c-logo">
            <div class="c-logo__wordmark">{% include "svg/logo-pds-wordmark.svg" %}</div>
          </div>
        </div>
        <div class="l-container--xl">
          <div class="c-logo">
            <div class="c-logo__icon">{% include "svg/logo-pds-icon.svg" %}</div>
          </div>
        </div>
      </section>
      <main class="c-site-content" role="main">
        {% block content %}
        {{ content | safe }}
        {% endblock %}
      </main>
      <footer class="c-site-footer">
        <div class="l-container">
          <h2 class="c-section__title">Elsewhere</h2> 
          <p class="c-social-links">
            <ul>
              <li><span class="c-link__icon">{% include "svg/icon-email.svg" %}</span><a href="mailto:jesse@plasticmind.com" class="c-link" target="_blank" rel="noopener noreferrer" title="Send me an email.">Email</a></li>
              <li><span class="c-link__icon">{% include "svg/icon-plasticmind.svg" %}</span><a href="https://plasticmind.com" class="c-link" target="_blank" rel="noopener noreferrer" title="Writing about technology on Plasticmind.">Plasticmind</a></li>
              <li><span class="c-link__icon">{% include "svg/icon-adplist.svg" %}</span><a href="https://adplist.org/mentors/jesse-gardner" class="c-link" target="_blank" rel="noopener noreferrer" title="Mentoring people on ADPList.">ADPList</a></li>
              <li><span class="c-link__icon">{% include "svg/icon-linkedin.svg" %}</span><a href="https://linkedin.com/in/plasticmind/" class="c-link" target="_blank" rel="noopener noreferrer" title="Connecting with professionals on LinkedIn.">LinkedIn</a></li>
              <li><span class="c-link__icon">{% include "svg/icon-twitter.svg" %}</span><a href="https://twitter.com/plasticmind" class="c-link" target="_blank" rel="noopener noreferrer" title="Connecting with people on Twitter.">Twitter</a></li>
              <li><span class="c-link__icon">{% include "svg/icon-tiktok.svg" %}</span><a href="https://tiktok.com/@plasticmind" class="c-link" target="_blank" rel="noopener noreferrer" title="Teaching people on TikTok.">TikTok</a></li>
          </p>
        </div>
      </footer>
  </body>
  <script>

    // Enable debug mode
    const debug = true;

    // Check if the user prefers reduced motion
    const isReduced = window.matchMedia(`(prefers-reduced-motion: reduce)`) === true || window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === true;

    // Check if the browser supports CSS blend modes
    const supportsBlendMode = ('CSS' in window && 'supports' in window.CSS) && window.CSS.supports('mix-blend-mode', 'multiply');

    // Select the SVG elements (layers) we want to animate
    const logo = document.querySelector('.c-logo__icon');
    const layers = document.querySelectorAll('.c-logo__icon g');
    const layer1 = document.querySelector('.c-logo__icon g:first-child');
    const layer2 = document.querySelector('.c-logo__icon g:nth-child(2)');
    const layer3 = document.querySelector('.c-logo__icon g:nth-child(3)');

    // Define starting positions for each layer
    // Todo: Make these dynamic based on the SVG's viewBox
    const l1_start = 300;
    const l2_start = -300;
    const l3_start = 88;

    // Define a starting opacity
    const opacity_start = 0.5;

    // Define a scroll threshold (in pixels) where the animation should stop
    const scrollThreshold = logo.offsetTop - 10;

    // Define debounce duration (in milliseconds)
    const debounceDuration = 2;

    // Variable to store the debounce timer
    let debounceTimer;

    function prepareAnimation() {
      // Set the initial opacity and position of the layers
      if ( layers !== null ) {
        layers.forEach((layer) => {
          layer.style.cssText = 'opacity:'+opacity_start+';';
        });
        layer1.setAttribute('transform', 'translate('+l1_start+', 0)');
        layer2.setAttribute('transform', 'translate('+l2_start+', 0)');
        layer3.setAttribute('transform', 'translate('+l3_start+', 0)');
      }
    }

    // Ease our animation
    function easeInOutBack(x) {
      const c1 = 1.70158;
      const c2 = c1 * 1.525;

      return x < 0.5
        ? (Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2
        : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2;
    }

    // Function to handle the scroll event
    function handleScroll() {

      // Get the current scroll position
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
      
      // Calculate the relative scroll position (0 to 1) based on the scroll threshold
      const relativeScroll = Math.min(scrollTop / scrollThreshold, 1);

      // Apply easing function to the relative scroll position
      const easedScroll = easeInOutBack(relativeScroll);

      // Apply translation to the SVG elements based on the scroll position

      layer1pos = l1_start - (easedScroll * l1_start);
      layer2pos = l2_start - (easedScroll * l2_start);
      layer3pos = l3_start - (easedScroll * l3_start);
      layer_opacity = opacity_start + (easedScroll * (1 - opacity_start));

      layers.forEach((layer) => {
        layer.style.cssText = 'opacity:'+layer_opacity+';';
      });
      layer1.setAttribute('transform', 'translate(' + layer1pos + ', 0)');
      layer2.setAttribute('transform', 'translate(' + layer2pos + ', 0)');
      layer3.setAttribute('transform', 'translate(' + layer3pos + ', 0)');
    }

    // Debounced scroll event listener
    function debounceScroll() {
      // Clear any existing debounce timer
      clearTimeout(debounceTimer);

      // Set a new debounce timer
      debounceTimer = setTimeout(handleScroll, debounceDuration);
    }

    console.log("isReduced: " + isReduced);
    console.log("supportsBlendMode: " + supportsBlendMode);

    // Add the debounced scroll event listener to the window
    if(supportsBlendMode && !isReduced) {
      prepareAnimation();
      window.addEventListener('scroll', debounceScroll);
    }

    if(debug===true) {

      // Create a new div element with a class of c-debug
      const debug_holder = document.createElement('div');

      debug_holder.classList.add('c-debug');

      const debugTitle = document.createElement('pre');
        debugTitle.innerHTML = '<b>Debug</b>';
        debug_holder.appendChild(debugTitle);

      const debugSupportsBlendMode = document.createElement('pre');
        debugSupportsBlendMode.innerHTML = 'Supports Blend Mode: ' + supportsBlendMode;
        debug_holder.appendChild(debugSupportsBlendMode);

      const debugIsReduced = document.createElement('pre');
        debugIsReduced.innerHTML = 'Is Reduced: ' + isReduced;
        debug_holder.appendChild(debugIsReduced);

      const debugScrollThreshold = document.createElement('pre');
        debugScrollThreshold.innerHTML = 'Scroll Threshold: ' + scrollThreshold;
        debug_holder.appendChild(debugScrollThreshold);

      document.querySelector('body').appendChild(debug_holder);

    }


  </script>
</html>
